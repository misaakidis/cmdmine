#! /usr/bin/env python

import os
import re
import sys
import pickle
import datetime
import click 
from redmine import Redmine
from config import *

# Don't print warnings about equalit.ie's unverified cert
import requests
requests.packages.urllib3.disable_warnings()

MACROS_FILE = 'macros.dat'

REDMINE = Redmine(REDMINE_LOCATION,
  username=REDMINE_USERNAME, password=REDMINE_PASSWORD,
  requests={'verify': False}, raise_attr_exception=False)

PROJECTS = { name: REDMINE.project.get(REDMINE_PROJECTS[name]) for name in REDMINE_PROJECTS.keys() }

@click.group()
def cmdmine():
  pass


def get_issue_info(macro_name):
  '''Returns the project name and issue ID for an issue assigned to a macro'''
  if not os.path.isfile(MACROS_FILE):
    return None, None
  macro_file = open(MACROS_FILE, 'rb')
  macros = pickle.load(macro_file)
  macro_file.close()
  if macro_name not in macros.keys():
    return None, None
  return macros[macro_name]['project_name'], macros[macro_name]['issue_id']


@cmdmine.command()
@click.option('--issue', '-i', type=int,
  help='The ID of the issue to reference')
@click.option('--project', '-p', type=str,
  help='The shorthand name of the project to refence')
@click.argument('macro_name')
def macro(issue, project, macro_name):
  if not os.path.isfile(MACROS_FILE):
    macros = {}
  else:
    macro_file = open(MACROS_FILE, 'rb')
    macros = pickle.load(macro_file)
    macro_file.close()
  macro_file = open(MACROS_FILE, 'wb')
  macros[macro_name] = {'issue_id': issue, 'project_name': project}
  pickle.dump(macros, macro_file)
  macro_file.close()
  click.echo('Registered macro {0} for project {1} issue {2}'.format(
    macro_name, project, issue))
  click.echo('You now have {0} macros registered.'.format(len(macros.keys())))


@cmdmine.command()
def macros():
  if not os.path.isfile(MACROS_FILE):
    click.echo('You currently have no macros registered.')
    return
  macro_file = open(MACROS_FILE, 'rb')
  macros = pickle.load(macro_file)
  macro_file.close()
  click.echo('Macro\tProject\t\tIssue ID')
  for macro_name in macros.keys():
    click.echo('{0}\t{1}\t\t{2}'.format(
      macro_name, macros[macro_name]['project_name'], macros[macro_name]['issue_id']))


@cmdmine.command()
@click.option('--project', '-p',
  help='The shorthand name of the project to search')
@click.option('--limit', '-l', default=20,
  help='Limit the number of issues that will be reported')
@click.option('--offset', '-o', default=0,
  help='Offset from the first retrieved issue to report')
def issues(project, limit, offset):
  matched_projects = [PROJECTS[name] for name in PROJECTS.keys() if project == name]
  issues = []
  for proj in matched_projects:
    for issue in proj.issues:
      issues.append(issue)
  click.echo('ID  Subject  Assigned to')
  for issue in issues[offset : offset + limit + 1]:
    click.echo(u' - '.join([str(issue.id), issue.subject, str(issue.assigned_to)]))


@cmdmine.command()
@click.argument('activity', type=click.Choice(ACTIVITIES))
@click.option('--project', '-p',
  help='The shorthand name of the project to update')
@click.option('--issue', '-i', type=int,
  help='The ID of the issue to reference')
@click.option('--macro', '-m', type=str, default='',
  help='A macro identifier. If provided, the project name and issue ID fields are not required')
@click.option('--hours', '-H', type=int,
  help='The number of hours worked on the issue')
@click.option('--minutes', '-M', type=int,
  help='The number of minutes worked on the issue')
@click.option('--date', '-d', type=str,
  help='The date the work was done, formatted YYYY-MM-DD')
@click.option('--comments', '-c', type=str,
  help='Commentary about the nature of the work done')
def log(activity, project, issue, macro, hours, minutes, date, comments):
  if len(macro) > 0:
    project, issue = get_issue_info(macro)
  if (not project) or (not issue): # Either are empty or None
    click.echo('No information available about the issue specified')
    return
  if hours is None and minutes is None:
    click.echo('You must enter some number of hours (-H) and/or minutes (-M) to be logged')
    return
  if date is None:
    date = datetime.date.today().strftime('%Y-%m-%d')
  time_spent = hours + (minutes / 60.0)
  time_entry = REDMINE.time_entry.create(
    issue_id=issue, spent_on=date, hours=time_spent,
    activity_id=ACTIVITIES[activity], comments=str(comments))
  print activity
  print project
  print issue
  print macro
  print hours
  print minutes
  print date
  print comments

if __name__ == '__main__':
  cmdmine()
